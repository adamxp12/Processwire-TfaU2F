<?php
namespace ProcessWire;

/**
 * TfaU2F (1.0.3)
 * Adds FIDO/U2F as a TFA option
 *
 * @author Adam Blunt
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
require "php-u2flib-server/src/u2flib_server/U2F.php";
class TfaU2F extends Tfa implements Module, ConfigurableModule
{
    protected $u2f = null;

    public function __construct()
    {
        parent::__construct();
        $this->u2f = new \u2flib_server\U2F('https://' . $this->wire('config')->httpHost);
    }

    public function init()
    {
        if(config()->version('3.0.165')) {
            // 3.0.165 and newer have an init() function in the Tfa class. previous versions did not
            // Strangely this init() function while not needed before is now required in new versions even if you dont use the auto-enable feature
            parent::init();
        }
        $this->addHookBefore('Tfa::getUserSettingsInputfields', $this, 'addScripts');
        $this->addHookBefore('Tfa::render', $this, 'addScripts');
    }
    

    public function addScripts()
    {
        $this->config->scripts->add($this->wire('config')->urls->$this . "u2f-api/u2f-api-polyfill.js");
        $this->config->scripts->add($this->wire('config')->urls->$this . "TfaU2F.js");
    }
    
    public function enabledForUser(User $user, array $settings)
    {
        return $settings['enabled'] === true;
    }
    

    public function isValidUserCode(User $user, $code, array $settings)
    {
        if (!strlen($code)) {
            return false;
        }

        $authreg = $this->session->authreg;
        $authreq = $this->session->authreq;
        $this->session->authreq = null;
        $this->session->authreg = null;


        try {
            $reg = $this->u2f->doAuthenticate(json_decode($authreq), $authreg, json_decode($code));
            return true;
        } catch (Exception $e) {
            return false;
        }

        return false;
    }


    public function ___getUserSettingsInputfields(User $user, InputfieldWrapper $fieldset, $settings)
    {
        parent::___getUserSettingsInputfields($user, $fieldset, $settings);
        
        if ($this->enabledForUser($user, $settings)) {
        } elseif ($this->wire('input')->requestMethod('POST')) {
            $fieldset->new('text', 'regdata')
                ->attr('maxlength', 20480);
            $fieldset->new('text', 'challenge');
        } else {
            $fieldset->new('hidden', 'appid')
                ->attr('id', 'TfaU2F_appId')
                ->attr('value', $this->u2f->getRegisterData()[0]->appId);
            
            $fieldset->new('hidden', 'challenge')
                ->attr('id', 'TfaU2F_challenge')
                ->attr('value', JSON_ENCODE($this->u2f->getRegisterData()[0], JSON_UNESCAPED_SLASHES));

            $fieldset->new('hidden', 'regdata')
                ->attr('id', 'TfaU2F_regdata')
                ->attr('maxlength', 20480);

            $fieldset->new('button', 'addKey', 'Enable two-factor authentication')
                ->attr('id', 'TfaU2F_button')
                ->attr('onclick', "TfaU2F_addkey()")
                ->value("Add Security Key");

            $fieldset->new('markup')
                ->attr('value', "<span id='TfaU2F_msg'>Click the button to register a new security. then click/tap your security key to continue.</span>");
        }
    }
    
    public function ___processUserSettingsInputfields(User $user, InputfieldWrapper $fieldset, $settings, $settingsPrev)
    {
        $settings = parent::___processUserSettingsInputfields($user, $fieldset, $settings, $settingsPrev);
        try {
            $aryreg = json_decode("[".$settings['regdata']."]");
            $data = "";
            foreach ($aryreg as $reg) {
                if (empty($data)) {
                    $data = json_encode($this->u2f->doRegister(json_decode($settings['challenge']), $reg));
                } else {
                    $data = $data . ', ' . json_encode($this->u2f->doRegister(json_decode($settings['challenge']), $reg));
                }
            }

            $settings['regkeys'] =  "[".$data."]";


            $settings['enabled'] = true;
            $settings['challenge'] = null;
            $settings['regdata'] = null;
            $this->message("Success! Your account is now secured with two-factor authentication");
        } catch (Exception $e) {
            $settings['enabled'] = false;
            $this->error("That did not work " . $e);
        }

        return $settings;
    }


    protected function getDefaultUserSettings(User $user)
    {
        return array(
            'enabled' => false,
            'regkeys' => ''
        );
    }

    public function buildAuthCodeForm()
    {
        $user = $this->getUser();
        $settings = $this->getUserSettings($user);
        
        $authreg = json_decode($settings['regkeys']);

        $this->session->authreg = $authreg;

        /*
         * Check if the authreq is null. if so make a new challenge
         * ProcessWire annoingly calls builtAuthCodeForm twice. once to build the form and a 2nd time when the user submits the form
         * thus validation was failing as the was non-matching challanges
         */

        if (is_null($this->session->authreq)) {
            $this->session->authreq = json_encode($this->u2f->getAuthenticateData($this->session->authreg), JSON_UNESCAPED_SLASHES);
        }
        
        
        
        $form = $this->modules->get('InputfieldForm');
        $form->attr('action', "./?$this->keyName=" . $this->getSessionKey(true))
             ->attr('id', "tfaform");
        $form->new('markup')
                ->attr('value', "<img style='height:80px' onload='TfaU2F_authKey()' src='" . $this->wire('config')->urls->$this . "assets\bluekeyside.png'><br>
                 You need to use your security key to login.<br>
                 Insert it now and tap/click the key to verify its you. If your key does not have a button just unplug it and then plug it back in.<br>
                 <div uk-alert class='uk-alert-danger' style='display:none' id='TfaU2F_error'></div>");
        $form->new('hidden', 'appid')
                ->attr('id', 'TfaU2F_appId')
                ->attr('value', $this->u2f->getRegisterData()[0]->appId);
        $form->new('hidden', 'authreq')
                ->attr('id', 'TfaU2F_authreq')
                ->attr('value', $this->session->authreq);
        $form->new('hidden', 'tfa_code')
                ->attr('id', 'TfaU2F_authresponse')
                ->attr('required', 'required');
        $form->new('button', 'authKey', 'Start two-factor authentication')
                ->attr('id', 'TfaU2F_button')
                ->attr('onclick', "TfaU2F_authKey()")
                ->value("Use Security Key");
        return $form;
    }
}
